#函数的参数传递
'''函数调用的参数传递：'''
#按照位置进行参数传递，
# def add(a,b):
#     c=a+b;
#     return c
# ans=add(10,20)#参数传递时，将10赋值给a，20赋值给b
# print(ans,type(ans))
#按照关键字实参进行参数传递
# def add(a,b):
#     c=a+b
#     return c
# ans=add(a=20,b=30)
# print(ans,type(ans)
'''函数的参数传递
注意：函数的形参只有在调用函数时才会发挥其作用，实参将值传递给形参，但是实参和形参变量的名字可以相等，也可以不等，他们均代表不同变量：
1.如果是实参是可变对象，在函数体内的修改会影响到实参的值，例如列表 字典 集合等等
2.如果是不可变对象，在函数体内的修改不会影响实参的值。例如整型变量 浮点型变量以及字符串变量 元组等等
'''
# def fun(a,b):
#     print("a",a)
#     print('b',b)
#     a=1000#在函数体内修改不可变对象的值为1000，但是对实参的值无影响，因为函数体内的变量a是形参，函数调用结束之后就消失了
#     b.append(100)#在函数体内修改可变对象，会对实参产生影响。
#     print(a)
#     print(b)
# a=8787#a为整数类型，是不可变对象
# b=[11,22,33]#b为列表，是可变对象
# print(a,b)
# fun(a,b)
'''由于整型变量a是不可变对象，因此在函数体内的修改对其本身不会产生影响。
列表对象b是可变对象，因此在函数体的修改会影响本身的值
'''
# print(a)
# print(b)
'''函数的递归，求阶乘'''
# def fact(n):
#     if n==1:
#         return 1
#     else:
#         return n*fact(n-1)
# a=fact(6)
# print(a,type(a))
'''函数的返回值
1.如果函数返回多个值，结果是返回一个一个元组
2.如果函数返回一个值，结果是直接返回类型，是元组就返回元组，是列表就返回列表等等。
3.如果函数没有返回值（即函数执行结束之后不需要向调用出提供数据），此时return可以省略不写
'''
'''函数返回多个值：结果会返回一个元组'''
# num=[i for i in range(1,21)]#生成一个列表，并且用列表对象num指向它
# #以下函数为求列表中所有奇数及其所有偶数
# def fact(num):
#     jishu=[]#创建一个空列表jishu[]，存放奇数
#     oushu=[]#创建一个空列表oushu[]，存放偶数
#     for i in num:
#         if i%2:#如果为为i%2的布尔值为true，即i%2！=0即i是奇数的话，存放到列表jishu[]当中
#             jishu.append(i)
#         else:
#             oushu.append(i)
#     return jishu,oushu#返回列表jishu[]和列表oushu[]
# print(fact(num))#输出通过函数求出列表当中所有奇数和偶数，由于函数返回多个值，因此返回值是一个元组
'''函数返回一个值，直接返回其类型，是啥类型就返回啥类型'''
# def fact(num):
#     lst=[]
#     for i in num:
#         if i%2:
#             lst.append(i)
#     return lst
# print(fact(num))
'''函数没有返回值,return可以省略不写'''
# def fact():
#     print('zisheng8787,奥里给')
#     # return#函数没有返回值，此时return可以省略不写
# fact()
'''函数的参数定义：
1.默认值参数:
函数定义时设置默认值参数：函数定义时，给形参设置默认值，只有实参的值
与默认值不一致的时候才需要实参的传递
2.个数可变的位置参数：
定义函数时，可能无法事先确定传递的位置实参的个数，可使用可变的位置参数。即使用*来定义个数可变的位置形参，
函数的返回值是一个元组。
3.个数可变的关键字形参：定义函数时，无法事先确定传递的关键字实参的个数，可以使用个数可变的关键字形参，即
使用**来定义个数可变的关键字形参。函数返回值是一个字典。
'''
'''函数定义默认值参数：'''
#只传递一个参数，且为位置传参，形参b采用默认值
# def fact(a,b=10):
#     print(a,b)
# fact(100)#答案输出100 10
#传递两个参数，且实参的值与形参默认值不符，则采用实参传递的值,默认值会被覆盖
# def fact(a,b=1):
#     print(a,b,end=' ')
# fact(10,20)#答案输出为10 20
'''函数定义个数可变的位置形参：函数的返回值是一个元组，元组时不可变序列
注意：个数可变的位置参数只能定义一个
'''
# def fact(*a):
#     print(a)
# fact(1)#传递一个参数
# fact(1212,2*32,33)#传递两个参数
# fact(1,12,212,1212,11)#传递三个参数
'''def fact(*a,*b):
    pass
    以上代码会报错，因为个数可变的位置参数只能定义一个
    '''
'''函数定义个数可变的关键字形参：函数的返回值是一个字典，字典是可变序列
注意：个数可变的关键字参数也只能定义一个
'''
# def fact(**a):
#     print(a)
# fact(a=10)#传递一个参数
# fact(a=121,b='daa',c='zisheng8787')#传递三个参数，函数的返回值是一个字典
'''def fact(*a,**b):
    pass
    以上代码不会报错。
def fact1(**a,*b):
    pass
    以上代码会报错
总结：在一个函数的定义过程中，如果既有个数可变的位置形参，又有个数可变的关键字形参，要求个数可变的位置形参放在
个数可变的关键字形参之前。
'''
'''函数的参数总结：
1.函数的调用：
（1）位置实参
(2) 将序列当中的每个元素都转换为位置实参：使用*
（3）关键字实参
(4) 将字典当中的每个键值对都转化为关键字实参，使用**即可
2.函数的定义：
(1)默认值形参
(2)关键字形参：使用*
(3)个数可变位置形参：使用*
(4)个数可变的关键字形参：使用**
'''
'''函数的调用：'''
'''在函数调用过程中，将序列中的每个元素都转化为位置实参:使用*'''
# def fact(a,b,c):
#     print(a,b,c)
# lst=[1,2,3]
# fact(*lst)#将列表中的每个元素都转化为位置实参，在调用函数的过程中进行参数的传递
'''在函数调用的过程中，将字典当中的每个键值对均转化为关键字实参'''
# def fact(**A):
#     print(A)
# ans={'zisheng':8787,'qiushaung':1122}
# fact(**ans)
'''函数的定义'''
'''个数可变的位置形参，函数的返回值是一个元组'''
# def fact(*a):
#     print(a)
# fact(11,222,33,44)
'''个数可变的关键字形参，函数的返回值是一个字典：'''
# def fact(**a):
#     print(a)
# fact(a=10,b=20,c=30)
'''默认值形参'''
# def fact(a,b=10):
#     print(a,b)
# fact(12)
'''关键字形参'''
# def fact(a,b,c,d):
#     print(a,b,c,d)
# fact(1,2,3,4)#位置实参传递
# fact(a=1,b=2,c=10,d=20)#关键字实参传递
# fact(1,2,c=10,d=20)#前两个采用位置实参传递，后两个采用个数可变的关键字实参传递
'''要求，形参c和d只能采用关键字实参传递：
只需要在c和d的前面加上一个*即可
'''
# def fact(a,b,*,c,d):#c和d之前有一个星号，代表*号之后的参数在函数调用的过程中只能采用关键字实参进行传递
#     print(a,b,c,d)
# fact(1,2,c=3,d=4)#c和d必须采用关键字实参进行传递
'''变量的作用域：即程序代码能访问该变量的区域，根据变量的有效范围分为局部变量和全局变量
1.局部变量：
在函数体内定义并且使用的变量，只在函数体内有效，如果局部变量采用global声明，该变量就会
变成全局变量。
2.全局变量：
在函数体外定义的变量，在函数体内外均有效.
'''
# a=1
# b=2#a和b均为全局变量，在函数体内外均有效
# def fact():
#     print(a)#输出全局变量a的值
#     global c#变量c是在函数体内定义的变量，为局部变量，但是使用global声明，所以c变为全局变量
#     c=111
# fact()
# print(c)#输出采用global进行声  明的变量，全局变量c的值
'''递归函数:
1.什么是递归函数：
如果在一个函数的函数体内又调用了该函数本身，则这个函数就称为递归函数。
2.递归的组成成分：
递归调用和递归终止条件
3.递归的调用过程：
（1）每递归调用一次函数，都会在栈内存分配一个栈帧
（2）每执行完一次函数，都会释放相应的内存空间
4.递归优缺点：
优点：思路和代码简单
缺点：占用内存比较多，效率比较低
'''
'''递归调用求阶乘：'''
# def fact(n):
#     if n==1:
#         return 1
#     else:
#         return fact(n-1)*n
# print(fact(6))
'''求取斐波那契数列'''
'''递归求斐波那契数列'''
# def fact(n):
#     if n==1 or n==2:#如果为第一项或者第二项的话，直接返回1即可，因为第一项和第二项均为1
#         return 1
#     else:
#         return fact(n-1)+fact(n-2)#如果不是第一项或者第二项，递归求取即可，该项等于上两项之和
# # lst=[i for i in range(1,10)]
# # for i in lst:
# #     print(fact(i),end=' ')
# for i in range(1,100):
#     print(fact(i),end=' ')
'''使用列表进行求取'''
# lst=[0,1,1]
# for i in range(3,100):
#     lst.append(lst[i-1]+lst[i-2])
#     print(lst[i],end=' ')
