#什么是元组
#元组是python内置的数据结构之一，是一个不可变的序列
#不可变序列：字符串 元组。特点：没有增删改操作,进行增加删除修改操作后内存地址会发生改变
#可变序列：列表 字典。特点：可以进行增加 删除 修改操作,并且对象地址不发生改变
'''可变序列
列表 字典
'''
#可变序列 列表，增删改操作后内存地址不发生改变
# lst=[1,2,3,4]
# print(id(lst))
# lst.append(1000)
# print(id(lst))
# #不可变序列：字符串 增删改操作后内存地址会发生改变
# s='zisheng'
# print(id(s))
# s=s+'8787'
# print(id(s))
'''元组的创建：
特点：元组和列表极为相似，内部的元素的存储相同，唯一与列表不同的只是括号的差异，
列表是采用方括号进行表示，元组是采用小括号进行表示的
创建方式：
1.直接采用小括号进行创建,注意小括号是可以直接省略不写的。t=(1,2,'zisheng8787')
2.使用内置函数tuple（）函数。t=tuple((1,2,3,4))
3.只包含一个元组的元素需要使用逗号和小括号. t=(1,)
'''
#元组的创建
# t=('zi','sheng',1,2,3)
# t='zi','zsss',1,2,3,4#小括号直接省略不写
# t=(1,)#元组内部只包含一个元素的时候,要加上逗号,不然不是元组类型
# t=tuple((1,2,3,'zi'))
# print(t,type(t),end=' ')
#空元组的创建方式:
# t1=()
# t2=tuple()
# # 空字典的创建方式:
# t3={}
# t4=dict()
# #空列表的创建方式:
# t5=[]
# t6=list()
# print('空列表',t5,t6)
# print('空元组',t1,t2)
# print('空字典',t3,t4)
'''为什么要将元组设计成不可变序列
1.在多任务的环境下,同时操作对象时不需要加锁,可以同时访问,但只能访问,不允许修改.
因此,在程序当中尽量使用不可变序列.
'''
'''注意事项:
1.元组中存储的是对象的引用
2.如果元组中对象本身是不可变对象,则不能在引用其他对象
3.如果元组中的对象是可变对象,则可变对象的引用不能改变,但是数据可以发生改变.数据改变之后内存地址保持不变
'''
# t=('zisheng',[10,20],1)
# print(t)
# print(type(t))
# print(t[0],type(t[0]),id(t[0]))
# print(t[1],type(t[1]),id(t[1]))
# print(t[2],type(t[2]),id(t[2]))
'''尝试将t[1]修改为100
我们可以发现是不可取的,因为元组内存储的是对象的引用,不可以去修改,即元组是一个不可变序列.
'''
# t[1].append(1000)#向列表t[1]的末尾加入一个元素1000,元组内t[1]存储的是列表的引用,可以改变它内部的数据
# print(t[1],id(t[1]))
'''获取元组内元素的方式
通过索引进行获取:但是要注意一下,需要事先知道元组内有多少元素
元组的遍历:for in循环遍历
'''
'''通过索引进行获取'''
# print(t[0],t[1],t[2])
'''元组的遍历
元组是可迭代对象,所以可以用for in 循环进行遍历
'''
# t=('zi','sheng','8787',[122,321,456],11,2,3,4,5,6)
# for i in t:
#     print(i,end=' ')
'''什么是集合
python当中内置的数据结构之一，与列表 字典 一样都是可变的序列，可以进行增加删改操作。集合是没有value的字典，即只存储key，
容易知道集合内部的元素是不能重复的，利用这一性质可以实现去重作用
集合内部的元素是无顺序的，即先插入的元素不一定在前，后插入的元素也不一定在后，当我们向集合当中插入元素的时候，要根据
这个元素的值去计算哈希函数值来确定存储位置。
'''
'''集合的创建方式：
1.直接使用花括号进行创建
2.使用内置函数set()
'''
#直接采用花括号进行创建
# s={1,2,3,1,2,3,4,5,6}
# print(s)#只会输出123456,在内部实现了自动去重的作用，内部元素不能重复
# #使用内置函数set（）
# s=set({1,2,3,4,5,5,6,6,1})
# print(s,type(s))
# s1=set(range(10))#生成一个0到9的整数序列，并且把这些元素放到集合当中
# print(s1,type(s1))
# #使用内置函数set()将列表当中的元素转换为集合
# s2=set([1,2,3,4,5,6])
# print(s2,type(s2))
# #使用内置函数set()将元组中的元素转换为集合
# s3=set((111,2,3,4,5,6,5))
# print(s3,type(s3))
#使用内置函数set()将字符串转换为集合
# s=set('zisheng8787')
# print(s,type(s))
'''定义一个空集合
注意：不能直接使用花括号进行定义，直接使用花括号定义的是一个字典
定义一个空集合必须采用set（）函数进行创建
'''
#例子
# s=set()
# print(s,type(s))
'''集合的相关操作
集合元素的判断操作：
in/not in
集合元素的新增操作：
1.调用add()方法：一次只添加一个元素
2.调用update()方法：一次至少增加一个元素
集合元素的删除操作：
1.调用remove()方法：一次删除一个指定的元素，若元素不存在，则抛出keyerror
2.调用discard()方法：一次删除一个指定的元素，若元素不存在，则不抛出keyerror
3.调用pop()方法：一次删除一个任意元素
4.调用clear()方法：直接清空集合当中的所有元素
'''
#使用in/not in 判断元素是否在集合当中
# s={1,2,3,4,5,1,2,3,6}
# print(1 in s)
# print(2 in s)
# print(2 not in s)
'''集合元素的新增操作'''
# print("原本集合",s)
'''使用add()方法一次只增加一个元素'''
# s.add(1000)
# print('新增元素之后',s)
'''使用update()方法：一次增加至少一个元素'''
'''向集合当中增加一个集合'''
# s.update({11,22,33,44,55,66,55})
# print("增加元素之后",s)
'''向集合当中增加一个列表'''
# s.update([111,222,333,444,555])
# print(s)
'''向集合当中增加一个元组'''
# s.update((111,222,333,444,555))
# print(s,type(s))
'''集合元素的删除操作'''
'''使用remove方法'''
# s.remove(1)#删除元素值为1的元素
# print(s)
# s.remove(11)#删除元素值为11的元素，由于该元素不存在，会抛出值错误
# print(s)
'''使用discard()方法'''
# s.discard(1)#删除元素值为1的元素
# print(s)
# s.discard(11)#元素11不存在，不会执行删除操作，即删除失败.比remove（）方法好的地方是，方法不会报错
# print(s)
'''pop()方法：删除任意一个元素，可以理解为随即删除'''
# s.pop()#删除集合当中的任何一个元素，随即删除，注意一下：不可指定参数，pop()方法内部是无参数的
# print(s)
'''clear()方法：删除集合当中的所有元素'''
# s.clear()
# print(s)
'''集合之间的关系
1.两个集合是否相等：
可以使用运算符==或者!=进行判断，相等返回True
2.一个集合是否是另一个集合的子集：
可以调用方法issbuset()进行判断,是的话返回True
3.一个集合是否是另一个集合的超子集：是的话返回True
可以调用方法issuperset()进行判断
4.两个集合是否没有交集：
可以调用方法isidsjoint()进行判断,没有交集返回True
'''
'''两个集合是否相等'''
# s1={1,2,3,4,5}
# s2={1,2,3,4,5}
# print(s1==s2)
# print(s1!=s2)
'''一个集合是否是另一个集合的子集'''
# s1={1,2,3,4,5,6,7}
# s2={1,2,3,4}
# s3={11,22,33}
# # print(s2.issubset(s1))#判断s2是不是s1的子集
# # print(s3.issubset(s1))#判断s3是不是s1的子集
'''一个集合是否是另一个集合的超集'''
# print(s1.issuperset(s2))#s1是s2的超集吗
# print(s3.issuperset(s2))#s3是s2的超集吗
'''两个集合是否没有交集'''
# print(s2.isdisjoint(s3))
'''集合的数学操作:
1.并集
2.交集
3.差集
3.对称差集
'''
s1={1,2,3,4,5}
s2={2,3,4,5,6,7}
'''两个集合交集操作'''
# print(s1.intersection(s2))
# print(s1 & s2)
'''两个集合的并集操作'''
# print(s1.union(s2))
# print(s1 | s2)
'''两个集合的差集操作'''
# print(s1.difference(s2))#集合s1和集合s2的差集
# print(s1-s2)#集合s1和集合s2的差集
'''两个集合的对称差集操作'''
# print(s1.symmetric_difference(s2))#集合s1和集合s2的对称差集
# print(s1 ^ s2)#集合s1和集合s2的对称差集
'''集合生成式：生成集合的公式
与列表生成式极为i相似，只是括号不同而已。列表是采用方括号，集合是采用花括号
没有生成元组的公式哦。元组内存储的是不可变对象。
'''
#例子：
# s={i * i for i in range(1,10)}
# print(s,type(s))
