'''字符串：
在python当中字符串是基本的数据类型，是一个不可变的序列
字符串实际上可以看作是全部由字符组成的列表
'''
'''字符串的驻留机制：
只保存一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中，即python的驻留机制是指对相同的字符串只保留一份拷贝，
后续如果再创建相同的字符串的时候，不会再开辟新的空间，而是把该字符串的地址赋值给新创建的变量。
字符串可以使用单引号 双引号或者三引号去定义
目前为止，已经学了两种不可变的序列，一个是元组，一个是字符串。
'''
# a='zisheng8787'
# b="zisheng8787"
# c='''zisheng8787'''
# print(a,id(a))
# print(b,id(b))
# print(c,id(c))#可以发现三个变量的内存地址是一样的，因为他们的值都是相同的，由于字符串的驻留机制，相同的字符串只会
# #保留一份拷贝
'''字符串的驻留机制的几种情况（采用交互模式）：
1.字符串的长度为0或者为1时 此时不论是否只含有标识符的字符串，都会产生驻留机制
2.符合标识符的字符串 即只含有字母 数字 和下划线的字符串
3.字符串只在编译时进行驻留，而非运行时 例如'ab'+'c'与''.join(['ab','c])不同，前一个在运行之前（编译时）就已经连接了，后者是在运行时进行连接的，
4.-5到256之间的整数数字
sys中的intern方法强制2个字符串指向同一个对象  注意字符串必须是str类型，不是int 类型哦
pycharm对字符串进行了优化处理 一部分字符串的不驻留，但是内存地址却是相同的
'''
'''pycharm对字符串进行了优化处理：'''
# a='abc*'
# b='abc*'
# print(id(a),id(b))#可以看出，a和b两个字符串并没有产生驻留机制，但是他们的内存地址是相同的
'''字符串驻留机制的优缺点：
1.当需要值相同的字符串时，可以直接从字符串池子里拿来进行使用，避免频繁的创建和销毁，提升效率和节约内存，因为python当中的一切皆对象
创建对象和销毁对象是需要消耗时间的。因此拼接字符串和修改字符串是比较耗时间的，因为都会产生新的对象。
2.在需要进行字符串拼接的时候，尽量使用str类型join方法，不用+，因为join（）方法是先计算出所有字符中的长度，然后在进行拷贝，只new一次对象，
效率比较高。
'''
'''字符串的查询操作：
1.index()方法：从左向右查询字串第一次出现的位置，如果字串不存在，则返回valueerror
2.rindex()方法：从右向左查询字串第一次出现的位置，如果bu'cun
3.find()方法：从左向右查询字串第一次出现的位置，如果字串不存在，则返回-1
4.rfind()方法：从右向左查询字串第一次出现的位置，如果字串不存在，则返回-1
总结：在进行字符串的字串查询时，尽量使用find和rfind进行查询，因为不会抛出异常
'''
'''获取字符串的长度函数：
len()函数:该函数不仅可以获取到字符串中字符的长度，而且还能获取到其他序列的长度，例如列表，元组，字典等等。
'''
'''求一个数的绝对值函数：
abs()函数:该函数接收一个数，返回该数的绝对值，可以是整数，浮点数等等。
'''
# s='zisheng8787'
#采用index()方法进行查询：从左向右查询字串第一次出现的位置，如果查询的字符串不存在时，会输出valueerror
# print(s.index('isheng'))
# #采用rindex（）方法进行查询，从右向左进行查询字串第一次出现的位置，如果查询的字串不存在时，输出valueerror
# print(s.rindex('87'))
# #采用find()方法：从左向右进行查询字串第一次出现的位置，如果查询的字符串不存在，返回-1
# print(s.find('zaaa'))
# #采用rfind()进行查询： 从右向左查询字串第一次出现的位置，如果需要查询的字串不存在，返回-1
# print(s.rfind('dadas'))
'''字符串的大小写转换:
注意：由于字符串是不可变序列,对字符串进行操作的时候，会产生新的字符串对象
1.upper()方法: 将字符串中的所有字符转坏为大写字母
2.lower()方法：将字符串中的所有字符转化为小写字母
3.swapcase()方法：将字符串中的大写字母转化为小写字母，小写字母转化为大写字母
4.capitalize()方法：将字符串的第一个字符转坏为大写字母，其余字符转化为小写字母
5.title()方法：将每个单词的第一个字符转坏为大写字母，其余字符转化为小写字母.
'''
# s='hOu zI sHeng 8787'
# ans=s.upper()
# res=s.lower()
# str=s.swapcase()
# cnt=s.capitalize()
# ss=s.title()
# print(s,ans,res,cnt,str,ss,end='\t')
'''字符串内容对齐操作的方法：
1.center()方法：居中对齐,第一个参数指定宽度，第二个参数指定填充字符，其中第二个参数时可选的，默认是空格，
当设置的宽度小于等于原字符串的长的时候，则直接返回原字符串
2.ljust()方法：左对齐，第一个参数指定宽度，第二个参数指定填充字符，默认值是空格，当设置的宽度小于等于字符串的长度的时候，
直接返回源字符串即可。
4.rjust()方法：右对齐，第一个参数指定宽度，第二个参数指定填充字符，默认值为空格，当设置的宽度小于等于原字符串的长度的时候，
直接返回其原字符串。
5.zfill()方法：右对齐，只含有一个参数，用于指定宽度，当宽度小于等于字符串的长度的时候，用0进行补充。
'''
# s='zisheng8787'
# #采用center()方法：
# print(s.center(15,'*'))
# #采用ljust()方法：
# print(s.ljust(15,'%'))
# #采用rjust()方法：
# print(s.rjust(15,'@'))
# #采用zfill()方法：
# print(s.zfill(15))
'''字符串的劈分:
注意：无论是split()方法还是rsplit()方法，返回值都是一个列表，而且如果不指定最多劈分次数，从左边开始劈分和从右边开始劈分是一样的
1.split()方法：从字符串的左边开始劈分，默认的劈分字符是空格，可以使用sep来设置劈分字符，使用maxsplit来设置最多劈分次数，
当达到最多劈分次数的时候，剩余的字串会单独作为一部分。
2.rsplit()方法：从字符串的右边开始劈分，默认的劈分字符为空格字符，可以使用sep来指定劈分字符，maxsplit来指定最多劈分次数，
当达到最多劈分次数的时候，剩余的字串就单独作为一部分.
'''
'''采用split()方法：'''
# s='zi*sheng 8787 * 11 22 3*3'
# # print(s.split())#不设置任何参数，默认劈分字符为空格字符
# print(s.split(sep='*'))#设置劈分字符为'*'
# print(s.split(sep='*',maxsplit=2))#设置劈分字符以及最多劈分次数
# # '''采用rsplit()方法：'''
# # print(s.rsplit())#不设置任何参数，默认是从右往左进行劈分，劈分字符为空格字符，
# # print(s.rsplit(sep='*'))#设置一个默认值参数，指定劈分字符为*
# print(s.rsplit(sep='*',maxsplit=2))#设置最多劈分次数和劈分字符
'''判断字符串操作的方法：
1.isidentifier()方法：判断指定的字符串是不是合法的标识符(字母 数字 下划线)
2.isspace()方法：判断指定的字符串是不是全部由空白字符组成（回车符 换行符 水平制表符）
3.isalpha()方法：判断指定的字符串是不是全部由字母组成，当字符串中的所有字符均为字母字符时，函数返回True
4.isnumeric()方法：判断指定的字符串是不是全部由数字字符组成，范围比较广泛，例如小数点什么的都算数字字符
5isalnum()方法：判断指定的字符串是不是全部由字母和数字组成
6.isdecimal()方法：判断指定的字符串是不是全部由十进制数字组成
7.isdigit()方法：判断字符串中是不是全部为纯数字组成，当字符串中的所有字符均为纯数字字符时，函数返回True
8.isupper()方法：用于判断字符串中所有字母字符是不是都是大写的，如果是返回True，否则返回False
9.islower()方法：用于判断字符串中所有字母字符是不是都是小写的，如果是的话返回True
'''
# s='zisheng'
# print(s.isidentifier())#判断是不是全部由合法的标识符组成
# print(s.isspace())#判断是不是全部由空白字符组成
# print(s.isalpha())#判断是不是全部由字母组成
# print(s.isnumeric())#判断是不是全部由数字组成
# print(s.isalnum())#判断是不是全部由字母和数字组成
# print(s.isdecimal())#判断字符串是不是全部由十进制数字组成
'''字符串的替换与合并
1.字符串的替换操作：
replace()方法：第一个参数是将要被替换的字符串，第二个参数是要替换的字串，可以设置替换次数，直接设置数目即可，该方法返回替换后的字符串.
2.字符串的合并操作：
join()方法:可以将列表或者元组中的字符串合并成一个字符串
'''
# s='zisheng8787 11 22 33'
'''replace()方法：'''
# ans=s.replace('sheng','qiu')
# print(ans)
# ans=s.replace('87','aa',1)#设置替换次数，直接设置即可
# print(ans)
'''join()方法：'''
'''将列表中的字符串连接成一个字符串'''
# lst=[]
# for i in range(10):
#     lst.append('*')
# s=''.join(lst)
# print(s)
'''将元组中的字符串连接成一个字符串'''
# t=('zisheng','8787','11','22','33')
# ans=''.join(t)
# print(ans)
'''字符串的比较操作
运算符：> == >= <=  < !=
比较规则：首先比较两个字符串的第一个字符，如果第一个字符相等话则继续比较下一个字符，依次比较下去，直至两个字符串中的字符
不相等为止，比较结果就是两个字符串的比较结果.
比较原理：两个字符进行比较的时候比较的是原始值，使用内置函数ord()可以得到字符的原始值，与内置函数ord()函数对应的是
chr()函数，此函数可以得到原始值的对应的字符.
'''
# print(ord('a'))#字符a的原始值是它的ASCII码值
# print(chr(97))#ASCII码值为97的元素对应字符a
'''字符串的切片操作：
由于字符串是不可变序列，因此不具备增删改操作，且切片操作会产生新的列表对象
'''
# s='zisheng8787 11 22 33'
# ans=s[:7:2]
# print(ans)
'''格式化字符串：
1.%作占位符：
%s->字符串 %d或者%i->整数  %f->浮点数
语法格式：例子：‘我叫%s,今年%d岁’ % （name,age）
2.{}作为占位符：括号内为索引.
此方法需要使用format方法
3.字符串前面加上一个表示格式化字符串
'''
# x=int(input("请输入一个二进制数"))
# print('{0}的二进制表示为{1}'.format(x,bin(x)))
# print(f'{x}的二进制表示为{bin(x)}')
# print('%d的二进制表示为%s' % (x,bin(x)))
# print('{0}的八进制表示为{1}'.format(x,oct(x)))
# print(f'{x}的八进制表示为{oct(x)}')
# print('%d的八进制表示为%s' % (x,oct(x)))
# print('{0}的十六进制表示为{1}'.format(x,hex(x)))
# print(f'{x}的十六进制表示为{hex(x)}')
# print('%d的十六进制表示为%s' % (x,hex(x)))
'''字符串的编码转换：
编码：将字符串转化为二进制数据 采用str类型的encode方法
解码：将二进制数据转化为字符串类型 采用byte中的decode方法
'''
# s='海内存知己'
'''编码：'''
# print(s.encode(encoding='GBK'))
'''解码：
byte是二进制数据，即字节型数据,先编码后解码，byte就等于编码的结果，注意编码和解码格式要相同
采用什么格式编码，就要采用什么格式解码
'''
# byte=s.encode(encoding='GBK')
# print(byte.decode(encoding='GBK'))
'''将信息带有颜色进行输出
格式为\033[显示形式;默认为0;31~37m(背景颜色)。。。\033[m
'''
# print('\033[0;31m好好学习，天天向上吧\033[m')
# print('\033[0;32m好好学习，天天向上吧\033[m')
# print('\033[0;33m好好学习，天天向上吧\033[m')